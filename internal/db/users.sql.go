// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (auth0_id, email)
VALUES ($1, $2)
RETURNING id, auth0_id, email, created_at
`

type CreateUserParams struct {
	Auth0ID string
	Email   string
}

type CreateUserRow struct {
	ID        uuid.UUID
	Auth0ID   string
	Email     string
	CreatedAt sql.NullTime
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Auth0ID, arg.Email)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Auth0ID,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByAuth0ID = `-- name: GetUserByAuth0ID :one
SELECT id, auth0_id, email, created_at
FROM users
WHERE auth0_id = $1
`

type GetUserByAuth0IDRow struct {
	ID        uuid.UUID
	Auth0ID   string
	Email     string
	CreatedAt sql.NullTime
}

func (q *Queries) GetUserByAuth0ID(ctx context.Context, auth0ID string) (GetUserByAuth0IDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByAuth0ID, auth0ID)
	var i GetUserByAuth0IDRow
	err := row.Scan(
		&i.ID,
		&i.Auth0ID,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}
